///////////////////////////////////////////////////////////////////////////////
// [!output SOURCE_FILE_NAME]
#include "[!output TCPCH].h"
#pragma hdrstop

#include "[!output HEADER_FILE_NAME]"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module [!output CLASS_NAME]
BEGIN_INTERFACE_MAP([!output CLASS_NAME])
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
	INTERFACE_ENTRY(IID_ITcCncBase, ITcCncBase)
	INTERFACE_ENTRY(IID_ITcCncTrafo, ITcCncTrafo)
///<AutoGeneratedContent id="InterfaceMap">
///</AutoGeneratedContent>
END_INTERFACE_MAP()

[!if VERSIONED_CLASSFACTORY]IMPLEMENT_IPERSIST_LIB([!output CLASS_NAME], VID_[!output PROJECT_NAME], CID_[!output PROJECT_NAME][!output CLASS_NAME])[!endif]
IMPLEMENT_ITCOMOBJECT([!output CLASS_NAME])
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2([!output CLASS_NAME])
IMPLEMENT_ITCADI([!output CLASS_NAME])
IMPLEMENT_ITCWATCHSOURCE([!output CLASS_NAME])
IMPLEMENT_ITCCNCBASE([!output CLASS_NAME])
IMPLEMENT_ITCCNCTRAFO([!output CLASS_NAME])

///////////////////////////////////////////////////////////////////////////////
// Set parameters of [!output CLASS_NAME] 
BEGIN_SETOBJPARA_MAP([!output CLASS_NAME])
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_[!output CLASS_NAME]CncObjectRef, m_CncObjectRef)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of [!output CLASS_NAME] 
BEGIN_GETOBJPARA_MAP([!output CLASS_NAME])
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_[!output CLASS_NAME]CncObjectRef, m_CncObjectRef)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of [!output CLASS_NAME]
BEGIN_OBJPARAWATCH_MAP([!output CLASS_NAME])
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of [!output CLASS_NAME]
BEGIN_OBJDATAAREA_MAP([!output CLASS_NAME])
///<AutoGeneratedContent id="ObjectDataAreaMap">
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
// Constructor
[!output CLASS_NAME]::[!output CLASS_NAME](): m_forwardNbrIn(5), m_forwardNbrOut(5)
{
///<AutoGeneratedContent id="MemberInitialization">
///</AutoGeneratedContent>
	m_spCnc.SetOID(OID_CncKernel);
	memset(&m_CncObjectRef, 0, sizeof(m_CncObjectRef));
}

///////////////////////////////////////////////////////////////////////////////
// Destructor
[!output CLASS_NAME]::~[!output CLASS_NAME]()
{
}

///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI([!output CLASS_NAME])

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT [!output CLASS_NAME]::SetObjStatePS(PTComInitDataHdr pInitData)
{
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	if (SUCCEEDED(hr) && m_CncObjectRef.type != TCCNC_REGISTEROBJECT_TYPE_TRAFO)
	{
		m_spSrv->TcReportLog(ADSLOG_MSGTYPE_ERROR | ADSLOG_MSGTYPE_LOG, "%s:   invalid object type (%d instead of %d)", m_objName, m_CncObjectRef.type, TCCNC_REGISTEROBJECT_TYPE_TRAFO);
		hr = ADS_E_INVALIDPARM;
	}

	if (SUCCEEDED(hr))
	{
		if (((m_CncObjectRef.index < TC_REG_OBJ_INDEX_TRAFO_KIN_ID_MIN) || (m_CncObjectRef.index > TC_REG_OBJ_INDEX_TRAFO_KIN_ID_MAX))
			&& ((m_CncObjectRef.index < TC_REG_OBJ_INDEX_TRAFO_ADD_KIN_ID_MIN) || (m_CncObjectRef.index > TC_REG_OBJ_INDEX_TRAFO_ADD_KIN_ID_MAX)))
		{
			m_spSrv->TcReportLog(ADSLOG_MSGTYPE_ERROR | ADSLOG_MSGTYPE_LOG, "%s: invalid object index (%d instead of %d - %d or %d - %d)",
				m_objName, m_CncObjectRef.index, TC_REG_OBJ_INDEX_TRAFO_KIN_ID_MIN, TC_REG_OBJ_INDEX_TRAFO_KIN_ID_MAX, TC_REG_OBJ_INDEX_TRAFO_ADD_KIN_ID_MIN, TC_REG_OBJ_INDEX_TRAFO_ADD_KIN_ID_MAX);

			hr = ADS_E_INVALIDPARM;
		}
	}

	if (SUCCEEDED(hr))
	{
		if (SUCCEEDED(hr=m_spSrv->TcQuerySmartObjectInterface(m_spCnc)))
		{
			if (FAILED(hr = m_spCnc->RegisterObject(m_CncObjectRef,THIS_ITCOMOBJECT)))
				m_spCnc = NULL;
		}
		if (FAILED(hr))
		{
			if (m_spCnc)
				m_spCnc->UnregisterObject(m_CncObjectRef);
			m_spCnc = NULL;
		}
	}
	m_spSrv->TcReportLog(ADSLOG_MSGTYPE_HINT|ADSLOG_MSGTYPE_LOG, "CTcCncTrafo: PREOP to SAFEOP");

	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT [!output CLASS_NAME]::SetObjStateSO()
{
	HRESULT hr = S_OK;
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT [!output CLASS_NAME]::SetObjStateOS()
{
	HRESULT hr = S_OK;
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT [!output CLASS_NAME]::SetObjStateSP()
{
	HRESULT hr = S_OK;

	if ( m_spCnc )
		m_spCnc->UnregisterObject(m_CncObjectRef);
	m_spCnc = NULL;

	return hr;
}

HRESULT [!output CLASS_NAME]::TrafoSupported(PTcCncTrafoParameter p, bool fwd)
{
	if ( p == NULL ) {
    m_spSrv->TcReportLog(ADSLOG_MSGTYPE_ERROR | ADSLOG_MSGTYPE_LOG, FTEXT("Pointer null!"));
    return E_TCOM_KIN_TRF_PARAM_NIL;
  }
  if ( p->type != EcNcTrafoParameter_ExtCnc ) {
    m_spSrv->TcReportLog(ADSLOG_MSGTYPE_ERROR | ADSLOG_MSGTYPE_LOG, FTEXT("EcNcTrafoParameter_Invalid!"));
		return E_TCOM_KIN_TRF_INVALID_PARAM_TYPE;
  }
  if ( p->i == NULL ) {
    m_spSrv->TcReportLog(ADSLOG_MSGTYPE_ERROR | ADSLOG_MSGTYPE_LOG, FTEXT("p->i == NULL!"));
    return E_TCOM_KIN_TRF_INPUT_NIL; 
  }
  if ( p->o == NULL ) {
    m_spSrv->TcReportLog(ADSLOG_MSGTYPE_ERROR | ADSLOG_MSGTYPE_LOG, FTEXT("p->o == NULL!"));
    return E_TCOM_KIN_TRF_OUTPUT_NIL; 
  }

  ULONG dim_i, dim_o;
  if (fwd) {
    dim_i = m_forwardNbrIn;
    dim_o = m_forwardNbrOut;
  }
  else{
    dim_i = m_forwardNbrOut;
    dim_o = m_forwardNbrIn;
  }
  if ( p->dim_i != dim_i)
  {
    p->ret_value1 = p->dim_i;
    p->ret_value2 = dim_i;
    strcpy( p->ret_text, "Inputvector");
    m_spSrv->TcReportLog(ADSLOG_MSGTYPE_ERROR | ADSLOG_MSGTYPE_LOG, FTEXT("p->dim_i == %d, m_forwardNbrIn == %d"), p->dim_i, m_forwardNbrIn);
		return E_TCOM_KIN_TRF_INVALID_INPUT_DIM;
  }
	if ( p->dim_o != dim_o)
  {
    p->ret_value1 = p->dim_o;
    p->ret_value2 = m_forwardNbrOut;
    strcpy( p->ret_text, "Outputvector");
    m_spSrv->TcReportLog(ADSLOG_MSGTYPE_ERROR | ADSLOG_MSGTYPE_LOG, FTEXT("p->dim_o == %d, m_forwardNbrOut == %d"), p->dim_o, m_forwardNbrOut);
		return E_TCOM_KIN_TRF_INVALID_OUTPUT_DIM;
  }
  return S_OK;
}

HRESULT [!output CLASS_NAME]::GetDimensions( PULONG pForwardInput, PULONG pForwardOutput)
{
	if ( pForwardOutput )
		*pForwardOutput = m_forwardNbrOut;
	if ( pForwardInput )
		*pForwardInput = m_forwardNbrIn;

	return S_OK;
}

HRESULT [!output CLASS_NAME]::Backward(PTcCncTrafoParameter p)
{
	unsigned int i;

	for (i=0; i< m_forwardNbrIn, i< m_forwardNbrOut; i++)
	{
		p->o[i] = p->i[i];
	}

	return S_OK;
}

HRESULT [!output CLASS_NAME]::Forward(PTcCncTrafoParameter p)
{
	unsigned int i;

	for (i=0; i< m_forwardNbrIn, i< m_forwardNbrOut; i++)
	{
		p->o[i] = p->i[i];
	}

	return S_OK;
}
